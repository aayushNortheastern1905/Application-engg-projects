/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Business.Broker;
import Business.InterestedCustomer;
import Business.InterestedCustomerDirectory;
import Business.Management;
import Business.Property;
import Business.PropertyDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author admin
 */
public class ManagementApproveApplicantJPanel extends javax.swing.JPanel {
    private JPanel workArea;
    private PropertyDirectory propertyDirectory;
    private Property selectedProperty;
    private Management management;
    private ArrayList<String> propertyId;

    
    private int selectedApplication;



    /**
     * Creates new form MnaagementApproveJPanel
     */
    public ManagementApproveApplicantJPanel(JPanel workArea, PropertyDirectory propertyDirectory, Management management) {
        initComponents();
        this.workArea = workArea;
        this.propertyDirectory = propertyDirectory;
        this.management = management;
        this.propertyId = new ArrayList<String>();
        populatePropertyTable();
        
    }
    
    public void populatePropertyTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblProperty.getModel();
        dtm.setRowCount(0);
        for(Property property: propertyDirectory.getPropertyDirectory()){
            if(!property.isIsTaken() && management.getManagementName().equals(property.getManagement().getManagementName()) && !property.isIsTaken() && !property.getInterestedCustomerDirectory().getInterestedCustomerDirectory().isEmpty()) {
            Object[] row = new Object[4];
                        System.out.println("Prop: " + property.getName() + " Is Taken?: " + property.isIsTaken() );

            propertyId.add(property.getPropertyId());
            row[0] = property.getName();
            row[1] = property.getAddress();
            row[2] = property.getUniversity().getUniversityName();
            row[3] = property.getPincode();
            
            dtm.addRow(row);
            } 
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProperty = new javax.swing.JTable();
        btnViewApplicants = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblApplicants = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        radioYes = new javax.swing.JRadioButton();
        radioNo = new javax.swing.JRadioButton();
        btnApprove = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(223, 223, 223));

        jLabel1.setFont(new java.awt.Font("MS UI Gothic", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Approve Applications");

        jButton1.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jButton1.setText("<< Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tblProperty.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        tblProperty.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Property Name", "Property Address", "University", "Pincode"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProperty);

        btnViewApplicants.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnViewApplicants.setText("View Applicants");
        btnViewApplicants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewApplicantsActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("MS UI Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Applicants:");

        tblApplicants.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        tblApplicants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Property ID", "Applicant ID", "Name", "Phone Number", "Roommates", "Budget"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblApplicants);

        jLabel3.setFont(new java.awt.Font("MS UI Gothic", 1, 14)); // NOI18N
        jLabel3.setText("Approve?");

        buttonGroup1.add(radioYes);
        radioYes.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        radioYes.setText("Yes");

        buttonGroup1.add(radioNo);
        radioNo.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        radioNo.setText("No");

        btnApprove.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnApprove.setText("View");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        jButton2.setText("Done");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnViewApplicants, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnApprove, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radioYes)
                        .addGap(18, 18, 18)
                        .addComponent(radioNo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnViewApplicants, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(btnApprove)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(radioYes)
                    .addComponent(radioNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnViewApplicantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewApplicantsActionPerformed
        int selectedRow = tblProperty.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from table first to view details", "Warning",JOptionPane.WARNING_MESSAGE);
        }
        else {

            String selectedPropertyId = propertyId.get(selectedRow);
            System.out.println(selectedPropertyId);
            
            selectedProperty = propertyDirectory.searchPropertyById(selectedPropertyId);

            populateApplicantsTable(selectedProperty.getInterestedCustomerDirectory(), selectedProperty);
        }
    }//GEN-LAST:event_btnViewApplicantsActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        selectedApplication = tblApplicants.getSelectedRow();
        if(selectedApplication<0){
            JOptionPane.showMessageDialog(null,"Please select a row from table first to view details", "Warning",JOptionPane.WARNING_MESSAGE);
        }
        else {
            
             DefaultTableModel model = (DefaultTableModel) tblApplicants.getModel();
            String propertyId = (String) model.getValueAt(selectedApplication, 0);
            String name = (String) model.getValueAt(selectedApplication, 2);
//            System.out.println("Hery" + name);
            
            Property prop = propertyDirectory.searchPropertyById(propertyId);
            
//            Property prop = propertyDirectory.getPropertyDirectory().get(selectedApplication);
            radioYes.setSelected(prop.isIsTaken());
            radioNo.setSelected(!prop.isIsTaken());
        }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
          DefaultTableModel model = (DefaultTableModel) tblApplicants.getModel();
            String propertyId = (String) model.getValueAt(selectedApplication, 0);
            String applicantId = (String) model.getValueAt(selectedApplication, 1);
            String name = (String) model.getValueAt(selectedApplication, 2);
            
            Property prop = propertyDirectory.searchPropertyById(propertyId);

        if(radioYes.isSelected()) {
            
            for(Property property : propertyDirectory.getPropertyDirectory()){
                if(!property.getPropertyId().equals(propertyId)){
                    property.getInterestedCustomerDirectory().removeInterestedCustomerByApplicationId(applicantId);
                }
            }
            
            prop.setIsTaken(true);
            prop.setRentedTo(applicantId);
            JOptionPane.showMessageDialog(null,"Application Approved");
            radioYes.setSelected(false);
            radioNo.setSelected(false);
            populatePropertyTable();
            refreshApplicantsTable();
        }

    }//GEN-LAST:event_jButton2ActionPerformed
    
    public void populateApplicantsTable(InterestedCustomerDirectory interestedCustomerDirectory, Property selectedProperty) {
         DefaultTableModel dtm = (DefaultTableModel) tblApplicants.getModel();
         dtm.setRowCount(0);        
         for(InterestedCustomer ic: interestedCustomerDirectory.getInterestedCustomerDirectory()){
            Object[] row = new Object[6];
            row[0] = selectedProperty.getPropertyId();
            row[1] = ic.getInterestedCustomerID();
            row[2] = ic.getInterestedCustomerName();
            row[3] = ic.getInterestedCustomerPhoneNumber();
            row[4] = ic.getNumberOfRoomates();
            row[5] = ic.getDepositAmount();
            
            dtm.addRow(row);
    }
     }
    
    public void refreshApplicantsTable() {
                 DefaultTableModel dtm = (DefaultTableModel) tblApplicants.getModel();
dtm.setRowCount(0);  
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnViewApplicants;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton radioNo;
    private javax.swing.JRadioButton radioYes;
    private javax.swing.JTable tblApplicants;
    private javax.swing.JTable tblProperty;
    // End of variables declaration//GEN-END:variables
}
